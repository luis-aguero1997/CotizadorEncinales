package FacturasXML;

import BaseDeDatos.*;
import Clases.*;
import Formularios.*;
import Formularios.Facturas.*;
import java.io.*;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author macbookair
 */
public class FRM_Factura extends javax.swing.JFrame {

    /**
     * Creates new form FRM_Factura
     */
    DefaultTableModel TablaCamposReceptor;
    DefaultTableModel TablaReceptor;
    DefaultTableModel TablaConcepto;
    File Carpeta;
    File[] ListaFactura;
    int cont_correo=0;
    int cont_rfc=0;
    String Ruta;
    String Verificar_Correo = " ";
    String Verificar_RFC = " ";
    String NombreArchivo;
    String FechaTomada;
    
    JFileChooser jFC = new JFileChooser();
    File Archivo;
    FileInputStream Entrada;
    FileOutputStream Salida;
    
    DecimalFormat mDF;
    Date Fecha;
    
    public FRM_Factura() 
    {
        TablaCamposReceptor = new DefaultTableModel()
        {
            @Override
            public boolean isCellEditable(int row, int column) 
            {
                return false;
            }
        };
        TablaReceptor = new DefaultTableModel()
        {
            @Override
            public boolean isCellEditable(int row, int column) 
            {
                return false;
            }
        };
        TablaConcepto = new DefaultTableModel()
        {
            @Override
            public boolean isCellEditable(int row, int column) 
            {
                return column == 0;
            }
            @Override
            public Class getColumnClass(int columna)
            {
              if (columna == 0) return Boolean.class;
              return String.class;
            }
        };

        TablaCamposReceptor.addColumn("Nombre Archivo");
        TablaCamposReceptor.addColumn("RFC");
        TablaCamposReceptor.addColumn("Nombre");
        TablaCamposReceptor.addColumn("Fecha");
        TablaCamposReceptor.addColumn("Folio");
        TablaCamposReceptor.addColumn("Serie");
        TablaCamposReceptor.addColumn("Importe");
        TablaCamposReceptor.addColumn("T. Impuestos Trasladados");
        TablaCamposReceptor.addColumn("Subtotal");
        TablaCamposReceptor.addColumn("Total");
        
        TablaReceptor.addColumn("RFC");
        TablaReceptor.addColumn("Nombre");
        TablaReceptor.addColumn("Lugar Expedición");
        TablaReceptor.addColumn("T. Impuestos Trasladados");
        TablaReceptor.addColumn("Impuesto");
        TablaReceptor.addColumn("Tasa");
        TablaReceptor.addColumn("Importe");
        
        TablaConcepto.addColumn("Elegir");
        TablaConcepto.addColumn("Cantidad");
        TablaConcepto.addColumn("Unidad");
        TablaConcepto.addColumn("Descripción");
        TablaConcepto.addColumn("Valor Unitario");
        TablaConcepto.addColumn("Importe");
        
        NombreArchivo = "";
        FechaTomada = "";
        
        mDF = new DecimalFormat("#.#####");
        
        initComponents();
        //CargarFacturas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TBL_CamposReceptor = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TBL_Concepto = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TBL_Receptor = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        BTN_Cargar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        TXT_Buscar = new javax.swing.JTextField();
        BTN_TomarMP = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        TBL_CamposReceptor.setModel(TablaCamposReceptor);
        TBL_CamposReceptor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TBL_CamposReceptorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TBL_CamposReceptor);

        TBL_Concepto.setModel(TablaConcepto);
        jScrollPane2.setViewportView(TBL_Concepto);

        jLabel1.setText("Receptor:");

        jLabel2.setText("Concepto:");

        TBL_Receptor.setModel(TablaReceptor);
        jScrollPane3.setViewportView(TBL_Receptor);

        jLabel3.setText("Emisor");

        BTN_Cargar.setText("Cargar Facturas");
        BTN_Cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CargarActionPerformed(evt);
            }
        });

        jLabel4.setText("Buscar:");

        TXT_Buscar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                TXT_BuscarCaretUpdate(evt);
            }
        });
        TXT_Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXT_BuscarActionPerformed(evt);
            }
        });
        TXT_Buscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXT_BuscarKeyTyped(evt);
            }
        });

        BTN_TomarMP.setText("Tomar Materia Prima");
        BTN_TomarMP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_TomarMPActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/flecha-hacia-la-izquierda (3).png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/espalda (2).png"))); // NOI18N
        jButton1.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/espalda (2).png"))); // NOI18N
        jButton1.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/espalda (2).png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(TXT_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BTN_Cargar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(440, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane3)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)
                                .addComponent(BTN_TomarMP))
                            .addGap(0, 742, Short.MAX_VALUE)))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(TXT_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BTN_Cargar))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(688, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(63, 63, 63)
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(33, 33, 33)
                    .addComponent(jLabel1)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel2)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(31, 31, 31)
                    .addComponent(BTN_TomarMP)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTN_CargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CargarActionPerformed
        // TODO add your handling code here:
        if (jFC.showDialog(null,"Abrir") == JFileChooser.DIRECTORIES_ONLY)
        {
            Archivo = jFC.getCurrentDirectory();
        }
        CargarFacturas();  
    }//GEN-LAST:event_BTN_CargarActionPerformed

    private void TXT_BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXT_BuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXT_BuscarActionPerformed

    private void TBL_CamposReceptorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TBL_CamposReceptorMouseClicked
        // TODO add your handling code here:
        LimpiarTablaReceptor();
        LimpiarTablaConcepto();
        TomarFactura();
    }//GEN-LAST:event_TBL_CamposReceptorMouseClicked

    private void TXT_BuscarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_TXT_BuscarCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_TXT_BuscarCaretUpdate

    private void TXT_BuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXT_BuscarKeyTyped
        // TODO add your handling code here:
        String Valor = TXT_Buscar.getText();
        if (Valor.isEmpty())
        {
            TBL_CamposReceptor.clearSelection();
        }
        else
        {
            for (int i = 0; i < TBL_CamposReceptor.getRowCount(); i++)
            {
                Boolean Buscar = TBL_CamposReceptor.getValueAt(i, 1).toString().contains(Valor);
                Boolean BuscarRFC = TBL_CamposReceptor.getValueAt(i, 0).toString().contains(Valor);
                
                if (Buscar || BuscarRFC)
                {
                    TBL_CamposReceptor.changeSelection(i, 0, false, false);
                    break;
                }
                else
                {
                    
                }
            } 
        }
    }//GEN-LAST:event_TXT_BuscarKeyTyped

    private void BTN_TomarMPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_TomarMPActionPerformed
        // TODO add your handling code here:
        try
        {
            String DescripcionN = "El usuario " + Login.NombreUsuario + " agregó una factura en formato XML";
            BD_1 mBD = new BD_1();
            mBD.AgregarRegistro(DescripcionN);
            mBD.Desconectar();
            MandarRutaFecha();
            SubirArchivoXML();
            VerificarMateriaPrima();
        }
        catch (Exception e)
        {
            
        }       
    }//GEN-LAST:event_BTN_TomarMPActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        AddFactura mAddFactura = new AddFactura();
        this.dispose();
        mAddFactura.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static boolean checar_Correo(String correo)
    {
        
        String Regex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
 
        Pattern mPattern = Pattern.compile(Regex);
        Matcher mMatcher = mPattern.matcher(correo);
        
        if (mMatcher.matches() == true) 
        {           
            return true;
        }
        else
        {
            
        }
        return mMatcher.matches();
    }
    public static boolean checar_RFC(String rfc)
    {
        String p_PM = "^(([A-ZÑ&]{3})([0-9]{2})([0][13578]|[1][02])(([0][1-9]|[12][\\d])|[3][01])([A-Z0-9]{3}))|" +
            "(([A-ZÑ&]{3})([0-9]{2})([0][13456789]|[1][012])(([0][1-9]|[12][\\d])|[3][0])([A-Z0-9]{3}))|" +
            "(([A-ZÑ&]{3})([02468][048]|[13579][26])[0][2]([0][1-9]|[12][\\d])([A-Z0-9]{3}))|" +
            "(([A-ZÑ&]{3})([0-9]{2})[0][2]([0][1-9]|[1][0-9]|[2][0-8])([A-Z0-9]{3}))$";
        String p_PF = "^(([A-ZÑ&]{4})([0-9]{2})([0][13578]|[1][02])(([0][1-9]|[12][\\d])|[3][01])([A-Z0-9]{3}))|" +
            "(([A-ZÑ&]{4})([0-9]{2})([0][13456789]|[1][012])(([0][1-9]|[12][\\d])|[3][0])([A-Z0-9]{3}))|" +
            "(([A-ZÑ&]{4})([02468][048]|[13579][26])[0][2]([0][1-9]|[12][\\d])([A-Z0-9]{3}))|" +
            "(([A-ZÑ&]{4})([0-9]{2})[0][2]([0][1-9]|[1][0-9]|[2][0-8])([A-Z0-9]{3}))$";
                

        if (rfc.matches(p_PM) || rfc.matches(p_PF)) 
        {           
            return true;
        } 
        else 
        {
            return false;
        }
    }
    
    public void CargarFacturas()
    {
        LimpiarTablaCamposReceptor();
        Ruta = Archivo.getPath();
        //Ruta = "CasosPruebaXML/Reales";
        //Ruta = TXT_URL.getText();
        Carpeta = new File(this.Ruta);
        ListaFactura = Carpeta.listFiles();
        
        for (int i = 0; i < ListaFactura.length; i++) 
        {
            try 
            {
                FileReader Lector;
                Lector = new FileReader(ListaFactura[i]);
                BufferedReader Lector_Buffer = new BufferedReader(Lector);
                String renglon;
                Emisor mEMis = new Emisor();
                
                NombreArchivo = ListaFactura[i].getName();
                
                while ((renglon = Lector_Buffer.readLine()) != null) 
                {
                    
                    try 
                    {
                        Pattern mPattern;
                        Matcher mMatcher;
                        mPattern = Pattern.compile("Emisor Rfc=\"");
                        mMatcher = mPattern.matcher(renglon);

                        if (mMatcher.find()) 
                        {
                            char[] w = renglon.toCharArray();
                            String texto = "";
                            int j = mMatcher.end();
                            char caracter = w[j];

                            while (caracter != '"') 
                            {
                                j++;
                                texto = texto + caracter;
                                caracter = w[j];
                                mEMis.setRfc(texto);

                            }
                            checar_RFC(mEMis.getRfc());
                            if(checar_RFC(mEMis.getRfc()) == true) {
                                cont_rfc++;
                                String RFC_Temp = " "; 
                                RFC_Temp = cont_rfc + "  " + mEMis.getRfc() + "\n";
                                Verificar_RFC = RFC_Temp + Verificar_RFC;
                            }
                        }
                    } 
                    catch (Exception exe) 
                    {

                    }
                    
                    try 
                    {
                        Pattern mPattern;
                        Matcher mMatcher;
                        mPattern = Pattern.compile("Emisor.*Nombre=\"");
                        mMatcher = mPattern.matcher(renglon);

                        if (mMatcher.find()) 
                        {
                            char[] w = renglon.toCharArray();
                            String texto = "";
                            int j = mMatcher.end();
                            char caracter = w[j];

                            while (caracter != '"') 
                            {
                                j++;
                                texto = texto + caracter;
                                caracter = w[j];
                                mEMis.setNombre(texto);

                            }
                        }
                    } 
                    catch (Exception exe) 
                    {

                    }
                    try 
                    {
                        Pattern mPattern;
                        Matcher mMatcher;
                        mPattern = Pattern.compile("Fecha=\"");
                        mMatcher = mPattern.matcher(renglon);

                        if (mMatcher.find()) 
                        {
                            char[] w = renglon.toCharArray();
                            String texto = "";
                            int j = mMatcher.end();
                            char caracter = w[j];

                            while (caracter != 'T') 
                            {
                                j++;
                                texto = texto + caracter;
                                caracter = w[j];
                                mEMis.setFecha(texto);

                            }
                        }
                    } 
                    catch (Exception exe) 
                    {

                    }
                    try 
                    {
                        Pattern mPattern;
                        Matcher mMatcher;
                        mPattern = Pattern.compile("Folio=\"");
                        mMatcher = mPattern.matcher(renglon);

                        if (mMatcher.find()) 
                        {
                            char[] w = renglon.toCharArray();
                            String texto = "";
                            int j = mMatcher.end();
                            char caracter = w[j];

                            while (caracter != '"') 
                            {
                                j++;
                                texto = texto + caracter;
                                caracter = w[j];
                                mEMis.setFolio(texto);

                            }
                        }
                    } 
                    catch (Exception exe) 
                    {

                    }
                    try 
                    {
                        Pattern mPattern;
                        Matcher mMatcher;
                        mPattern = Pattern.compile("Serie=\"");
                        mMatcher = mPattern.matcher(renglon);

                        if (mMatcher.find()) 
                        {
                            char[] w = renglon.toCharArray();
                            String texto = "";
                            int j = mMatcher.end();
                            char caracter = w[j];

                            while (caracter != '"') 
                            {
                                j++;
                                texto = texto + caracter;
                                caracter = w[j];
                                mEMis.setSerie(texto);

                            }
                        }
                    } 
                    catch (Exception exe) 
                    {

                    }
                    try 
                    {
                        Pattern mPattern;
                        Matcher mMatcher;
                        mPattern = Pattern.compile("Traslado.*Importe=\"");
                        mMatcher = mPattern.matcher(renglon);

                        if (mMatcher.find()) 
                        {
                            char[] w = renglon.toCharArray();
                            String texto = "";
                            int j = mMatcher.end();
                            char caracter = w[j];

                            while (caracter != '"') 
                            {
                                j++;
                                texto = texto + caracter;
                                caracter = w[j];
                                mEMis.setImporte(texto);

                            }
                        }
                    } 
                    catch (Exception exe) 
                    {

                    }
                    try 
                    {
                        Pattern mPattern;
                        Matcher mMatcher;
                        mPattern = Pattern.compile("TotalImpuestosTrasladados=\"");
                        mMatcher = mPattern.matcher(renglon);

                        if (mMatcher.find()) 
                        {
                            char[] w = renglon.toCharArray();
                            String texto = "";
                            int j = mMatcher.end();
                            char caracter = w[j];

                            while (caracter != '"') 
                            {
                                j++;
                                texto = texto + caracter;
                                caracter = w[j];
                                mEMis.setImpuestos(texto);

                            }
                        }
                    } 
                    catch (Exception exe) 
                    {

                    }
                    try 
                    {
                        Pattern mPattern;
                        Matcher mMatcher;
                        mPattern = Pattern.compile("SubTotal=\"");
                        mMatcher = mPattern.matcher(renglon);

                        if (mMatcher.find()) 
                        {
                            char[] w = renglon.toCharArray();
                            String texto = "";
                            int j = mMatcher.end();
                            char caracter = w[j];

                            while (caracter != '"') 
                            {
                                j++;
                                texto = texto + caracter;
                                caracter = w[j];
                                mEMis.setSubTotal(texto);

                            }
                        }
                    } 
                    catch (Exception exe) 
                    {

                    }
                    try 
                    {
                        Pattern mPattern;
                        Matcher mMatcher;
                        mPattern = Pattern.compile("\" Total=\"");
                        mMatcher = mPattern.matcher(renglon);

                        if (mMatcher.find()) 
                        {
                            char[] w = renglon.toCharArray();
                            String texto = "";
                            int j = mMatcher.end();
                            char caracter = w[j];

                            while (caracter != '"') 
                            {
                                j++;
                                texto = texto + caracter;
                                caracter = w[j];
                                mEMis.setMontoTotal(texto);

                            }
                        }
                    } 
                    catch (Exception exe) 
                    {

                    }
                     try 
                     {
                        Pattern mPattern;
                        Matcher mMatcher;
                        mPattern = Pattern.compile(" correo=\"");
                        mMatcher = mPattern.matcher(renglon);

                        if (mMatcher.find()) 
                        {
                            char[] w = renglon.toCharArray();
                            String texto = "";
                            int j = mMatcher.end();
                            char caracter = w[j];

                            while (caracter != '"') 
                            {
                                j++;
                                texto = texto + caracter;
                                caracter = w[j];
                                mEMis.setMail(texto);

                            }
                            checar_Correo(mEMis.getMail());
                            cont_correo++;
                            if(checar_Correo(mEMis.getMail()) == true) {

                                String Correo_Temp = " "; 
                                Correo_Temp = cont_correo + "  " + mEMis.getMail() + "\n";
                                Verificar_Correo = Correo_Temp + Verificar_Correo;
                            }
                        }

                    } 
                     catch (Exception exe) 
                     {

                    }

                }
                Lector_Buffer.close();
                String row = NombreArchivo + ">" + mEMis.getRfc() + ">" + mEMis.getNombre() + ">" + mEMis.getFecha() + ">" + mEMis.getFolio() + 
                        ">" + mEMis.getSerie() + ">" + mEMis.getImporte() + ">" + mEMis.getImpuestos() + ">" + mEMis.getSubTotal() + ">" 
                        + mEMis.getMontoTotal()+ ">" + mEMis.getMail();

                String[] Frow = row.split(">");
                ((DefaultTableModel) this.TBL_CamposReceptor.getModel()).addRow(Frow);

            } 
            catch (Exception ex) 
            {

            }
        }
    }
    
    public void TomarFactura()
    {
        FileReader Lector;
        File Factura = ListaFactura[TBL_CamposReceptor.getSelectedRow()];
        try 
        {
            Lector = new FileReader(Factura);

            BufferedReader Lector_Buffer = new BufferedReader(Lector);

            String renglon;

            Tabla mTabla = new Tabla();
            Conceptos mCon = new Conceptos();

            while ((renglon = Lector_Buffer.readLine()) != null) 
            {

                try 
                {
                    Pattern mPattern;
                    Matcher mMatcher;
                    mPattern = Pattern.compile("Receptor Rfc=\"");
                    mMatcher = mPattern.matcher(renglon);

                    if (mMatcher.find()) 
                    {
                        char[] w = renglon.toCharArray();
                        String cadena = "";
                        int j = mMatcher.end();
                        char caracter = w[j];
                        
                        while (caracter != '"') 
                        {
                            j++;
                            cadena = cadena + caracter;
                            caracter = w[j];
                        }
                        mTabla.setRfc(cadena);
                    }
                } 
                catch (Exception exe) 
                {
                    
                }
                try 
                {
                    Pattern mPattern;
                    Matcher mMatcher;
                    mPattern = Pattern.compile("Receptor.*Nombre=\"");
                    mMatcher = mPattern.matcher(renglon);

                    if (mMatcher.find()) 
                    {
                        char[] w = renglon.toCharArray();
                        String cadena = "";
                        int j = mMatcher.end();
                        char caracter = w[j];
                        
                        while (caracter != '"') 
                        {
                            j++;
                            cadena = cadena + caracter;
                            caracter = w[j];
                        }
                        mTabla.setNombre(cadena);
                    }
                } 
                catch (Exception exe) 
                {
                    
                }
                try 
                {
                    Pattern mPattern;
                    Matcher mMatcher;
                    mPattern = Pattern.compile("LugarExpedicion=\"");
                    mMatcher = mPattern.matcher(renglon);

                    if (mMatcher.find()) 
                    {
                        char[] w = renglon.toCharArray();
                        String cadena = "";
                        int j = mMatcher.end();
                        char caracter = w[j];
                        
                        while (caracter != '"') 
                        {
                            j++;
                            cadena = cadena + caracter;
                            caracter = w[j];
                        }
                        mTabla.setCalle(cadena);
                    }
                } 
                catch (Exception exe) 
                {
                    
                }
                try 
                {
                    Pattern mPattern;
                    Matcher mMatcher;
                    mPattern = Pattern.compile("Impuestos.*TotalImpuestosTrasladados=\"");
                    mMatcher = mPattern.matcher(renglon);

                    if (mMatcher.find()) 
                    {
                        char[] w = renglon.toCharArray();
                        String cadena = "";
                        int j = mMatcher.end();
                        char caracter = w[j];
                        
                        while (caracter != '"') 
                        {
                            j++;
                            cadena = cadena + caracter;
                            caracter = w[j];
                        }
                        mTabla.setTotalimpuestos(cadena);
                    }
                } 
                catch (Exception exe) 
                {
                    
                }
                try 
                {
                    Pattern mPattern;
                    Matcher mMatcher;
                    mPattern = Pattern.compile("Traslado Impuesto=\"");
                    mMatcher = mPattern.matcher(renglon);

                    if (mMatcher.find()) 
                    {
                        char[] w = renglon.toCharArray();
                        String cadena = "";
                        int j = mMatcher.end();
                        char caracter = w[j];
                        
                        while (caracter != '"') 
                        {
                            j++;
                            cadena = cadena + caracter;
                            caracter = w[j];
                        }
                        mTabla.setImpuesto(cadena);
                    }
                } 
                catch (Exception exe) 
                {
                    
                }
                try 
                {
                    Pattern mPattern;
                    Matcher mMatcher;
                    mPattern = Pattern.compile("Traslado impuesto=.*tasa=\"");
                    mMatcher = mPattern.matcher(renglon);

                    if (mMatcher.find()) 
                    {
                        char[] w = renglon.toCharArray();
                        String cadena = "";
                        int j = mMatcher.end();
                        char caracter = w[j];
                        
                        while (caracter != '"') 
                        {
                            j++;
                            cadena = cadena + caracter;
                            caracter = w[j];
                        }
                        mTabla.setTasa(cadena);
                    }
                } 
                catch (Exception exe) 
                {
                    
                }
                try 
                {
                    Pattern mPattern;
                    Matcher mMatcher;
                    mPattern = Pattern.compile("Importe=\"");
                    mMatcher = mPattern.matcher(renglon);

                    if (mMatcher.find()) 
                    {
                        char[] w = renglon.toCharArray();
                        String cadena = "";
                        int j = mMatcher.end();
                        char caracter = w[j];
                        
                        while (caracter != '"') 
                        {
                            j++;
                            cadena = cadena + caracter;
                            caracter = w[j];
                        }
                        mTabla.setImporte(cadena);
                    }
                } 
                catch (Exception exe) 
                {
                    
                }
                try 
                {
                    Pattern mPattern;
                    Matcher mMatcher;
                    mPattern = Pattern.compile("Concepto ");
                    mMatcher = mPattern.matcher(renglon);

                    if (mMatcher.find()) 
                    {
                        try {
                            Pattern mPattern_2;
                            Matcher mMatcher_2;
                            mPattern_2 = Pattern.compile("Cantidad=\"");
                            mMatcher_2 = mPattern_2.matcher(renglon);

                            if (mMatcher_2.find()) 
                            {
                                char[] w = renglon.toCharArray();
                                String cadena = "";
                                int j = mMatcher_2.end();
                                char caracter = w[j];
                                
                                while (caracter != '"') 
                                {
                                    j++;
                                    cadena = cadena + caracter;
                                    caracter = w[j];
                                    mCon.setCantidad(cadena);
                                }
                            }
                        } 
                        catch (Exception exe) 
                        {
                            
                        }
                        try 
                        {
                            Pattern mPattern_2;
                            Matcher mMatcher_2;
                            mPattern_2 = Pattern.compile("Cantidad=.*ClaveUnidad=\"");
                            mMatcher_2 = mPattern_2.matcher(renglon);

                            if (mMatcher_2.find()) 
                            {
                                char[] w = renglon.toCharArray();
                                String cadena = "";
                                int j = mMatcher_2.end();
                                char caracter = w[j];
                                
                                while (caracter != '"') 
                                {
                                    j++;
                                    cadena = cadena + caracter;
                                    caracter = w[j];
                                    mCon.setUnidad(cadena);
                                }
                            }
                        } 
                        catch (Exception exe) 
                        {
                            
                        }
                        try {
                            Pattern mPattern_2;
                            Matcher mMatcher_2;
                            mPattern_2 = Pattern.compile("Cantidad=.*Descripcion=\"");
                            mMatcher_2 = mPattern_2.matcher(renglon);

                            if (mMatcher_2.find()) {
                                char[] w = renglon.toCharArray();
                                String cadena = "";
                                int j = mMatcher_2.end();
                                char caracter = w[j];
                                
                                while (caracter != '"') 
                                {
                                    j++;
                                    cadena = cadena + caracter;
                                    caracter = w[j];
                                    mCon.setDescripcion(cadena);
                                }
                            }
                        } catch (Exception exe) {
                        }
                        try 
                        {
                            Pattern mPattern_2;
                            Matcher mMatcher_2;
                            mPattern_2 = Pattern.compile("Cantidad=.*ValorUnitario=\"");
                            mMatcher_2 = mPattern_2.matcher(renglon);

                            if (mMatcher_2.find()) 
                            {
                                char[] w = renglon.toCharArray();
                                String cadena = "";
                                int j = mMatcher_2.end();
                                char caracter = w[j];
                                
                                while (caracter != '"') 
                                {
                                    j++;
                                    cadena = cadena + caracter;
                                    caracter = w[j];
                                    mCon.setValorunit(cadena);
                                }
                            }
                        } 
                        catch (Exception exe) 
                        {
                            
                        }
                        try 
                        {
                            Pattern mPattern_2;
                            Matcher mMatcher_2;
                            mPattern_2 = Pattern.compile("Cantidad=.*Importe=\"");
                            mMatcher_2 = mPattern_2.matcher(renglon);

                            if (mMatcher_2.find()) 
                            {
                                char[] w = renglon.toCharArray();
                                String cadena = "";
                                int j = mMatcher_2.end();
                                char caracter = w[j];
                                
                                while (caracter != '"') 
                                {
                                    j++;
                                    cadena = cadena + caracter;
                                    caracter = w[j];
                                    mCon.setImporte(cadena);
                                }
                            }
                        } 
                        catch (Exception exe) 
                        {
                            
                        }
                        
                        Object[] ags = new Object[6];
                        
                        //ags[0] = el checkbox;
                        ags[1] = mCon.getCantidad();
                        ags[2] = mCon.getUnidad();
                        ags[3] = mCon.getDescripcion();
                        ags[4] = mCon.getValorunit();
                        ags[5] = mCon.getImporte();
                        
                        ((DefaultTableModel) this.TBL_Concepto.getModel()).addRow(ags);

                    }
                } 
                catch (Exception exe) 
                {
                    
                }

            }
            Lector_Buffer.close();
            String lin = mTabla.getRfc() + ">" + mTabla.getNombre() + ">" + mTabla.getCalle() + ">" 
                    + ">" + mTabla.getTotalimpuestos() + ">" + mTabla.getImpuesto() 
                    + ">" + mTabla.getImporte() + ">" + mTabla.getTasa();  
            String[] line = lin.split(">");
            ((DefaultTableModel) this.TBL_Receptor.getModel()).addRow(line);

        } 
        catch (Exception e) 
        {

        }
    }
    
    public void LimpiarTablaReceptor()
    {   
        TablaReceptor = (DefaultTableModel) TBL_Receptor.getModel();
        int a = TablaReceptor.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            TablaReceptor.removeRow(TablaReceptor.getRowCount() - 1);
        }
    }
    
    public void LimpiarTablaCamposReceptor()
    {   
        TablaCamposReceptor = (DefaultTableModel) TBL_CamposReceptor.getModel();
        int a = TablaCamposReceptor.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            TablaCamposReceptor.removeRow(TablaCamposReceptor.getRowCount() - 1);
        }
    }
    
    public void LimpiarTablaConcepto()
    {   
        TablaConcepto = (DefaultTableModel) TBL_Concepto.getModel();
        int a = TablaConcepto.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            TablaConcepto.removeRow(TablaConcepto.getRowCount() - 1);
        }
    }
    
    public void MandarRutaFecha()
    {   
        if(TBL_CamposReceptor.getSelectedRow() != -1)
        {
            Ruta = Archivo + "/" + TBL_CamposReceptor.getValueAt(TBL_CamposReceptor.getSelectedRow(), 0);
            //Fecha: TBL_CamposReceptor.getValueAt(TBL_CamposReceptor.getSelectedRow(), 3);
            FechaTomada = TBL_CamposReceptor.getValueAt(TBL_CamposReceptor.getSelectedRow(), 3).toString();          
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Elige primeramente una factura");
        }
    }   
    public void VerificarMateriaPrima()
    {
        Boolean MateriaElegida;
        
        if(TBL_CamposReceptor.getSelectedRow() != -1)
        {
            Ruta = Archivo + "/" + TBL_CamposReceptor.getValueAt(TBL_CamposReceptor.getSelectedRow(), 0);
            //Fecha: TBL_CamposReceptor.getValueAt(TBL_CamposReceptor.getSelectedRow(), 3);
            FechaTomada = TBL_CamposReceptor.getValueAt(TBL_CamposReceptor.getSelectedRow(), 3).toString();
            
            for (int i = 0; i < TBL_Concepto.getRowCount(); i++)
            {
                MateriaElegida = (Boolean) TBL_Concepto.getValueAt(i, 0);
                
                if ((MateriaElegida == null) || (MateriaElegida == false))
                {
                    
                }
                else
                {                 
                    //JOptionPane.showMessageDialog(null, "Posicion " + i);
                    FRM_MPFactura.Cantidad = TBL_Concepto.getValueAt(i, 1).toString();
                    FRM_MPFactura.UnidadMedida = TBL_Concepto.getValueAt(i, 2).toString();
                    FRM_MPFactura.Descripcion = TBL_Concepto.getValueAt(i, 3).toString();
                    FRM_MPFactura.PrecioUnitario = TBL_Concepto.getValueAt(i, 4).toString();
                    FRM_MPFactura.FechaFactura = convert(Fecha);
                    BD_1 mBD = new BD_1();
                    FRM_MPFactura.idFactura = mBD.ConsultaUltimaFactura();
                    FRM_MPFactura mFRMMPF = new FRM_MPFactura();
                    mFRMMPF.setVisible(true);
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Elige primeramente una factura");
        }
    }
    
    public void SubirArchivoXML()
    {
        String nombre = TBL_CamposReceptor.getValueAt(TBL_CamposReceptor.getSelectedRow(), 0).toString();
        
        SimpleDateFormat fechaFormat = new SimpleDateFormat("yyyy-MM-dd");
        Fecha = null;
        try {
            Fecha = fechaFormat.parse(FechaTomada);
        } catch (ParseException ex) {
            Logger.getLogger(FRM_Factura.class.getName()).log(Level.SEVERE, null, ex);
        }
        File ruta = new File(this.Ruta);
        //JOptionPane.showMessageDialog(null, Ruta);
        
        if (ruta.length() > 1048576) {
            JOptionPane.showMessageDialog(null, "Archivo Demasiado grande para ser almacenado");
        } else {

            if (nombre.trim().length() != 0 && Ruta.trim().length() != 0 && !Fecha.equals("")) {

                BD pa = new BD();
                Archivo po = new Archivo();
                po.setNombre(nombre);
                po.setFecha(convert(Fecha));

                try {

                    byte[] pdf = new byte[(int) ruta.length()];

                    InputStream input = new FileInputStream(new File(Ruta));
                    input.read(pdf);
                    po.setPDF(pdf);
                } catch (IOException ex) {
                    po.setPDF(null);
                    //System.out.println("Error al agregar archivo pdf "+ex.getMessage());
                }
                pa.Agregar_PdfVO(po);

            } else {
                JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
            }

        }
    }
    
    private static java.sql.Date convert(java.util.Date uDate) {
        java.sql.Date sDate = new java.sql.Date(uDate.getTime());
        return sDate;
    }
    
    
    
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FRM_Factura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FRM_Factura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FRM_Factura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FRM_Factura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new FRM_Factura().setVisible(true);               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_Cargar;
    private javax.swing.JButton BTN_TomarMP;
    private javax.swing.JTable TBL_CamposReceptor;
    private javax.swing.JTable TBL_Concepto;
    private javax.swing.JTable TBL_Receptor;
    private javax.swing.JTextField TXT_Buscar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
